# input to computer
inputValue = 1

# relative base
relativeBase = 0

#intcode, relativeBase = "109,19,204,-34,99", 2000
intcode = "1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1101,3,0,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1101,0,708,1029,1101,1,0,1021,1102,38,1,1015,1101,25,0,1004,1101,21,0,1018,1102,1,34,1016,1101,0,713,1028,1101,735,0,1024,1101,31,0,1003,1102,1,24,1010,1101,20,0,1011,1101,0,27,1005,1102,726,1,1025,1101,426,0,1027,1101,0,777,1022,1102,1,32,1001,1101,37,0,1009,1101,429,0,1026,1102,1,36,1019,1101,0,0,1020,1101,0,30,1012,1101,0,770,1023,1101,0,35,1014,1101,0,33,1007,1102,23,1,1002,1101,0,28,1017,1102,1,22,1013,1102,39,1,1006,1101,0,26,1000,1101,29,0,1008,109,6,2102,1,-1,63,1008,63,27,63,1005,63,203,4,187,1106,0,207,1001,64,1,64,1002,64,2,64,109,-15,2108,26,9,63,1005,63,225,4,213,1106,0,229,1001,64,1,64,1002,64,2,64,109,9,21101,40,0,10,1008,1010,40,63,1005,63,251,4,235,1106,0,255,1001,64,1,64,1002,64,2,64,109,11,21108,41,40,0,1005,1011,271,1106,0,277,4,261,1001,64,1,64,1002,64,2,64,109,-7,1207,3,32,63,1005,63,297,1001,64,1,64,1105,1,299,4,283,1002,64,2,64,109,3,1201,-1,0,63,1008,63,42,63,1005,63,323,1001,64,1,64,1105,1,325,4,305,1002,64,2,64,109,2,2102,1,-7,63,1008,63,24,63,1005,63,345,1106,0,351,4,331,1001,64,1,64,1002,64,2,64,109,-6,21107,42,43,8,1005,1011,369,4,357,1106,0,373,1001,64,1,64,1002,64,2,64,109,-7,2108,30,7,63,1005,63,393,1001,64,1,64,1106,0,395,4,379,1002,64,2,64,109,18,21108,43,43,-3,1005,1011,413,4,401,1106,0,417,1001,64,1,64,1002,64,2,64,109,17,2106,0,-4,1105,1,435,4,423,1001,64,1,64,1002,64,2,64,109,-29,2107,26,2,63,1005,63,451,1105,1,457,4,441,1001,64,1,64,1002,64,2,64,109,20,1206,-2,471,4,463,1105,1,475,1001,64,1,64,1002,64,2,64,109,-9,1205,8,489,4,481,1105,1,493,1001,64,1,64,1002,64,2,64,109,-12,1202,-1,1,63,1008,63,26,63,1005,63,515,4,499,1105,1,519,1001,64,1,64,1002,64,2,64,109,25,1205,-6,531,1106,0,537,4,525,1001,64,1,64,1002,64,2,64,109,-31,1208,8,31,63,1005,63,555,4,543,1106,0,559,1001,64,1,64,1002,64,2,64,109,13,1207,1,38,63,1005,63,577,4,565,1106,0,581,1001,64,1,64,1002,64,2,64,109,4,21101,44,0,1,1008,1013,47,63,1005,63,605,1001,64,1,64,1106,0,607,4,587,1002,64,2,64,109,-6,2107,38,0,63,1005,63,629,4,613,1001,64,1,64,1106,0,629,1002,64,2,64,109,13,21102,45,1,-7,1008,1012,45,63,1005,63,655,4,635,1001,64,1,64,1105,1,655,1002,64,2,64,109,9,1206,-7,667,1106,0,673,4,661,1001,64,1,64,1002,64,2,64,109,-27,2101,0,7,63,1008,63,29,63,1005,63,699,4,679,1001,64,1,64,1106,0,699,1002,64,2,64,109,17,2106,0,10,4,705,1106,0,717,1001,64,1,64,1002,64,2,64,109,14,2105,1,-8,4,723,1001,64,1,64,1106,0,735,1002,64,2,64,109,-21,1202,-8,1,63,1008,63,34,63,1005,63,755,1105,1,761,4,741,1001,64,1,64,1002,64,2,64,109,18,2105,1,-6,1001,64,1,64,1106,0,779,4,767,1002,64,2,64,109,-15,1201,-6,0,63,1008,63,29,63,1005,63,801,4,785,1105,1,805,1001,64,1,64,1002,64,2,64,109,-14,1208,0,24,63,1005,63,825,1001,64,1,64,1106,0,827,4,811,1002,64,2,64,109,15,21102,46,1,-2,1008,1013,49,63,1005,63,847,1106,0,853,4,833,1001,64,1,64,1002,64,2,64,109,-17,2101,0,2,63,1008,63,23,63,1005,63,873,1106,0,879,4,859,1001,64,1,64,1002,64,2,64,109,16,21107,47,46,2,1005,1016,899,1001,64,1,64,1105,1,901,4,885,4,64,99,21101,0,27,1,21101,0,915,0,1106,0,922,21201,1,55486,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21102,942,1,0,1105,1,922,22102,1,1,-1,21201,-2,-3,1,21101,0,957,0,1105,1,922,22201,1,-1,-2,1105,1,968,22101,0,-2,-2,109,-3,2106,0,0"
#intcode = "1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1102,1,3,1000,109,988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000,2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99,4,17,104,0,99,0,0,1101,0,0,1020,1101,34,0,1004,1101,0,26,1008,1102,1,37,1011,1101,39,0,1018,1102,587,1,1022,1101,1,0,1021,1102,22,1,1012,1101,0,33,1014,1101,24,0,1016,1101,0,752,1029,1101,36,0,1002,1101,35,0,1006,1101,32,0,1009,1102,38,1,1003,1102,584,1,1023,1101,0,20,1001,1102,892,1,1025,1102,29,1,1000,1101,411,0,1026,1102,1,901,1024,1101,0,761,1028,1101,23,0,1017,1102,30,1,1013,1101,0,27,1015,1102,28,1,1005,1101,408,0,1027,1101,25,0,1007,1102,31,1,1019,1101,0,21,1010,109,5,1207,-2,39,63,1005,63,199,4,187,1105,1,203,1001,64,1,64,1002,64,2,64,109,12,21102,40,1,-1,1008,1016,40,63,1005,63,229,4,209,1001,64,1,64,1106,0,229,1002,64,2,64,109,-5,1207,-5,24,63,1005,63,249,1001,64,1,64,1106,0,251,4,235,1002,64,2,64,109,-14,2102,1,6,63,1008,63,32,63,1005,63,271,1106,0,277,4,257,1001,64,1,64,1002,64,2,64,109,2,1202,1,1,63,1008,63,20,63,1005,63,303,4,283,1001,64,1,64,1106,0,303,1002,64,2,64,109,7,2108,34,2,63,1005,63,319,1106,0,325,4,309,1001,64,1,64,1002,64,2,64,109,6,2101,0,-6,63,1008,63,24,63,1005,63,349,1001,64,1,64,1105,1,351,4,331,1002,64,2,64,109,4,21107,41,42,0,1005,1017,369,4,357,1105,1,373,1001,64,1,64,1002,64,2,64,109,5,21101,42,0,-5,1008,1017,41,63,1005,63,397,1001,64,1,64,1106,0,399,4,379,1002,64,2,64,109,9,2106,0,-4,1106,0,417,4,405,1001,64,1,64,1002,64,2,64,109,-20,21108,43,43,0,1005,1011,435,4,423,1105,1,439,1001,64,1,64,1002,64,2,64,109,-15,2102,1,8,63,1008,63,34,63,1005,63,465,4,445,1001,64,1,64,1105,1,465,1002,64,2,64,109,3,1201,6,0,63,1008,63,28,63,1005,63,491,4,471,1001,64,1,64,1106,0,491,1002,64,2,64,109,18,21108,44,46,0,1005,1017,511,1001,64,1,64,1106,0,513,4,497,1002,64,2,64,109,12,1205,-8,527,4,519,1105,1,531,1001,64,1,64,1002,64,2,64,109,-17,1208,-3,32,63,1005,63,553,4,537,1001,64,1,64,1105,1,553,1002,64,2,64,109,-13,1208,10,31,63,1005,63,573,1001,64,1,64,1105,1,575,4,559,1002,64,2,64,109,17,2105,1,7,1105,1,593,4,581,1001,64,1,64,1002,64,2,64,109,-8,2107,19,-7,63,1005,63,615,4,599,1001,64,1,64,1105,1,615,1002,64,2,64,109,4,1206,8,629,4,621,1106,0,633,1001,64,1,64,1002,64,2,64,109,-2,2101,0,-6,63,1008,63,34,63,1005,63,655,4,639,1105,1,659,1001,64,1,64,1002,64,2,64,109,10,1205,0,671,1105,1,677,4,665,1001,64,1,64,1002,64,2,64,109,-21,2107,26,8,63,1005,63,693,1106,0,699,4,683,1001,64,1,64,1002,64,2,64,109,19,1201,-9,0,63,1008,63,30,63,1005,63,719,1105,1,725,4,705,1001,64,1,64,1002,64,2,64,109,9,1206,-6,741,1001,64,1,64,1106,0,743,4,731,1002,64,2,64,109,-5,2106,0,6,4,749,1001,64,1,64,1105,1,761,1002,64,2,64,109,-14,1202,-1,1,63,1008,63,27,63,1005,63,781,1105,1,787,4,767,1001,64,1,64,1002,64,2,64,109,1,21107,45,44,5,1005,1014,807,1001,64,1,64,1105,1,809,4,793,1002,64,2,64,109,8,21101,46,0,0,1008,1017,46,63,1005,63,835,4,815,1001,64,1,64,1106,0,835,1002,64,2,64,109,-26,2108,20,10,63,1005,63,857,4,841,1001,64,1,64,1106,0,857,1002,64,2,64,109,24,21102,47,1,-5,1008,1010,46,63,1005,63,881,1001,64,1,64,1106,0,883,4,863,1002,64,2,64,109,6,2105,1,3,4,889,1001,64,1,64,1105,1,901,4,64,99,21102,27,1,1,21101,915,0,0,1105,1,922,21201,1,29830,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2,-1,1,21101,0,942,0,1105,1,922,21202,1,1,-1,21201,-2,-3,1,21102,1,957,0,1105,1,922,22201,1,-1,-2,1105,1,968,21201,-2,0,-2,109,-3,2106,0,0"
#intcode = "1102,34915192,34915192,7,4,7,99,0"

instructions = intcode.split(",")

# convert all numbers to int
instructions = [int(x) for x in instructions]

# append a bunch of stuff to instructions so it doesn't get overrun
for i in range(80000):
    instructions.append(0)

# current instruction pointer
ip = 0

#output to user
outputValue = 0

# end at 99
while(instructions[ip] != 99):
    # current op code (lowest 2 digits)
    i = instructions[ip]%100
    
    # get mode of each parameter
    # // does floor division (no floats)
    # %10 only gets that digit
    mode1 = (instructions[ip]//  100)%10
    mode2 = (instructions[ip]// 1000)%10
    mode3 = (instructions[ip]//10000)%10

    if (mode1 == 0):
        try:
            a = instructions[instructions[ip+1]]
        except:
            a = None
    elif(mode1 == 1):
        try:
            a = instructions[ip+1]
        except:
            a = None
    elif (mode1 == 2):
        try:
            a = instructions[instructions[ip+1]+relativeBase]
        except:
            a = None
    else:
        print("Mode1 Error")

    if (mode2 == 0):
        try:
            b = instructions[instructions[ip+2]]
        except:
            b = None
    elif(mode2 == 1):
        try:
            b = instructions[ip+2]
        except:
            b = None
    elif (mode2 == 2):
        try:
            b = instructions[instructions[ip+2]+relativeBase]
        except:
            b = None
    else:
        print("Mode2 Error")

    if (mode3 == 0):
        try:
            c = 0
        except:
            c = None
    elif(mode3 == 1):
        try:
            # issue
            print("Mode3==1 not accounted for!")
            break
            #c = instructions[ip+3]
        except:
            c = None
    elif (mode3 == 2):
        try:
            c = relativeBase
        except:
            c = None
    else:
        print("Mode3 Error")

    #if(mode3):
    #    print(instructions[ip], i, (mode1, mode2, mode3), (a, b), relativeBase, outputValue)
    #print( i, (a, b), relativeBase)
    #print(instructions)

    if(i==1):
        instructions[instructions[ip+3]+c] = a+b

        ip += 4
    elif(i==2):
        instructions[instructions[ip+3]+c] = a*b

        ip += 4
    elif(i==3):
        # take an input and store it at address given by parameter
        if (mode1 == 0):
            instructions[instructions[ip+1]] = inputValue
        elif(mode1 == 1):
            instructions[ip+1] = inputValue
        elif (mode1 == 2):
            instructions[instructions[ip+1]+relativeBase] = inputValue
        ip += 2
    elif(i==4):
        # outputs the value of its only parameter
        outputValue = a
        #print("Output at", ip, "is", outputValue)
        ip += 2
    elif(i==5):
        # jump if true
        if (a != 0):
            ip = b
        else:
            ip += 3
    elif(i==6):
        # jump if false
        if (a == 0):
            ip = b
        else:
            ip += 3
    elif(i==7):
        # less than
        instructions[instructions[ip+3]+c] = int(a<b)

        ip+=4
    elif(i==8):
        # equals
        instructions[instructions[ip+3]+c] = int(a==b)

        ip+=4
    elif(i==9):
        # adjusts the relative base by the value of its only parameter
        relativeBase += a
        ip += 2
    else:
        print("ERROR")

#print(instructions)
print("Relative Base:", relativeBase)
print("Output Value:", outputValue)
